/* Lab 8 - Ali Jones*/

/* includes */
#include "stdio.h"
#include "MyRio.h"
#include "me477.h"
#include <string.h>
#include "ctable2.h"
#include "TimerIRQ.h"
#include <pthread.h>
#include "matlabfiles.h"
//#include "emulate.h"

/* definitions */
void* Timer_Irq_Thread(void* resource);
double pos(void);

struct biquad{
	double b0; double b1; double b2; 	// numerator
	double a0; double a1; double a2;	// denominator
	double x0; double x1; double x2;	// input (error signal)
	double y1; double y2;				// output (voltage)
};

#include "myPIDF.h"


#define SATURATE(x,lo,hi)((x)<(lo)?(lo):(x)>(hi)?(hi):(x))
#define IMAX 4000	// buffer data points


/* global variables */
typedef struct {double xfa;		// position
				double v;		// velocity limit
				double a;		// acceleration limit
				double d;		// dwell time (s)
} seg;

typedef struct {
	NiFpga_IrqContext irqContext;	// context
	table *a_table;				// pointer to table
	seg *profile;				// pointer to profile
	int nseg;					// number of segs
	NiFpga_Bool irqThreadRdy;	// thread ready flag
} ThreadResource;

uint32_t timeoutValue;
MyRio_Encoder encC0;


/* prototypes */
double cascade(	double ein,			// input
				struct biquad *fa,	// biquad array
				int ns, 			// number of biquad sections
				double vmin,		// min output (saturation lower limit)
				double vmax);		// max output (saturation upper limit)

int Sramps(	seg *segs,		// segments array
			int *iseg, 		// current segment index
			int nseg,		// number of segments
			int *itime,		// current time index
			double T,		// sample period
			double *xa);		// next reference position

// buffers to save data
static double pref_buff[IMAX], pact_buff[IMAX], torque_buff[IMAX];
static double *pref_bp = pref_buff, *pact_bp = pact_buff, *torque_bp = torque_buff;

/*--------------------------------------------------
 Function main
 	 Purpose:		initializes MyRio session,
 	 	 	 	 	registers and initializes DiIRQ thread,
 	 	 	 	 	runs display value table,
 	 	 	 	 	unregisters thread when keypad 'DEL' is pressed
 	 Parameters:	none
 	 Returns: 		none
 *-------------------------------------------------*/
int main(int argc, char **argv)
{
	NiFpga_Status status;
	int32_t irq_status;
	MyRio_IrqTimer irqTimer0;
	ThreadResource irqThread0;
	pthread_t thread;
	char *Table_Title = "Motor Control Table";

    status = MyRio_Open();		    /*Open the myRIO NiFpga Session.*/
    if (MyRio_IsNotSuccess(status)) return status;

    // initialize table editor variables
    table my_table[] = {
    		{"P_ref: (revs)", 0, 0.},
    		{"P_act: (revs)",  0, 0.},
    		{"VDAout: (mv)", 0, 0.}
    };

    // initialize path variables
    double vmax = 50.;		// revs/s
    double amax = 20.;		// revs/s^2
    double dwell = 1.0;		// s
    int nseg = 8;
    seg mysegs[nseg] = {	// revs
    	{10.125, vmax, amax, dwell},
    	{20.250, vmax, amax, dwell},
    	{30.375, vmax, amax, dwell},
    	{40.500, vmax, amax, dwell},
    	{30.625, vmax, amax, dwell},
    	{20.750, vmax, amax, dwell},
    	{10.875, vmax, amax, dwell},
    	{0.000, vmax, amax, dwell},
    };

    // Registers corresponding to the IRQ channel
    irqTimer0.timerWrite = IRQTIMERWRITE;
    irqTimer0.timerSet = IRQTIMERSETTIME;
    timeoutValue = 500;

    // Register the interrupt thread
    irq_status = Irq_RegisterTimerIrq( &irqTimer0,
    							   	   &irqThread0.irqContext,
    							   	   timeoutValue);

    // Set the indicator to allow the new thread
    irqThread0.irqThreadRdy = NiFpga_True;

    // Create new thread to catch the IRQ
    irq_status = pthread_create( &thread,
    							 NULL,
    							 Timer_Irq_Thread,
    							 &irqThread0);

    // Initialize the thread resource to point to table
    irqThread0.a_table = my_table;

    // Set the thread ready flag
    irqThread0.irqThreadRdy = NiFpga_True;

    // call the table editor
    ctable2(Table_Title, my_table, 3);

    // terminate thread
	irqThread0.irqThreadRdy = NiFpga_False;
	irq_status = pthread_join(thread, NULL);

    // unregister timer interrupt
	irq_status = Irq_UnregisterTimerIrq( &irqTimer0,
										 irqThread0.irqContext);

	status = MyRio_Close();	 /*Close the myRIO NiFpga Session. */
	return status;
}

/*--------------------------------------------------
 Function Timer_Irq_Thread
 	 Purpose:		waits for IRQ,
 	 	 	 	 	services the interrupt (sets motor control voltage)
 	 	 	 	 	saves variables to matlab file
 	 Parameters:	thread resource
 	 Returns: 		none
 *-------------------------------------------------*/
void* Timer_Irq_Thread(void* resource){

	MyRio_Aio CI0, CO0;
	extern NiFpga_Session myrio_session;
	ThreadResource* threadResource = (ThreadResource*) resource;
	double vmin = -7.5;
	double vmax = 7.5;
	int bti = 5.;		// BTI length
	double T, curr_speed, error, output, vact_rad, vref_rad;
	int initial_call = 0;

	// call the biquad from myPIDF.h
	struct biquad *filter = PIDF;


	// rename the inputs
	double *pref = &((threadResource->a_table+0)->value);
	double *pact = &((threadResource->a_table+1)->value);
	double *vdaout = &((threadResource->a_table+2)->value);
	seg *mysegs = threadResource->profile;
	int nseg = threadResource->nseg;
	int iseg = -1, itime = -1;

	// initialize the I/O and set motor voltage to zero
	AIO_initialize(&CI0, &CO0);
	Aio_Write(&CI0, 0);

	// initialize the encoder interface
	EncoderC_initialize(myrio_session, &encC0);

	while (threadResource->irqThreadRdy == NiFpga_True){

			uint32_t irqAssert = 0;
			int p_ref_int;
			double p_ref, p_act;


			/* pause the loop while waiting for interrupt */
			Irq_Wait( threadResource->irqContext,
					  TIMERIRQNO,
					  &irqAssert,
					  (NiFpga_Bool*) &(threadResource->irqThreadRdy));
			/* schedule the next interrupt */
			timeoutValue = bti*1000;
			NiFpga_WriteU32( myrio_session,
							 IRQTIMERWRITE,
							 timeoutValue);
			NiFpga_WriteBool( myrio_session,
							  IRQTIMERSETTIME,
							  NiFpga_True);

			if(irqAssert){
				/* service interrupt */

				// call sramps() to compute the refernce position p_ref

				p_ref_int = Sramps(mysegs, &iseg, nseg, &itime, T, &pref);
				p_ref = (double)p_ref_int;

				// call pos() to obain motor position p_act
				p_act = pos() / 2000;	// revs

				// calculate error signal
				error = p_ref - p_act;

				// call cascade to compute control value
				output = cascade(error, PIDF, PIDF_ns, vmin, vmax);

				// output control value
				Aio_Write(&CO0, output);

				// change values in table
				*pref = p_ref;
				*pact = p_act;
				*vdaout = output*1000.;		// voltage out (mV)

				// save results for later analysis
				// reference position array (rad)
				if (pref_bp < pref_buff+IMAX)
					*pref_bp++ = *pref;
				// current position array (rad)
				if (pact_bp < pact_buff+IMAX)
					*pact_bp++ = *pact;
				// torque array (N-m)
				if (torque_bp < torque_buff+IMAX)
					*torque_bp++ = output*0.41*0.11;

				/* acknowledge interrupt */
				Irq_Acknowledge(irqAssert);
			}

		}

	// save values to matlab file
	MATFILE *mf;
	int err;
	mf = openmatfile("Lab8.mat", &err);
		if(!mf) printf("Can’t open mat file %d\n", err);

	matfile_addstring(mf, "myName", "Ali Jones");
	matfile_addmatrix(mf, "btiLength", bti, 1, 1, 0);
	matfile_addmatrix(mf, "pref", pref_buff, IMAX, 1, 0);
	matfile_addmatrix(mf, "pact", pact_buff, IMAX, 1, 0);
	matfile_addmatrix(mf, "torque", torque_buff, IMAX, 1, 0);
	// matfile_addmatrix(mf, "PIDF", (double)PIDF, 11, 1, 0);
	matfile_close(mf);

	pthread_exit(NULL);
	return NULL;
}

/*--------------------------------------------------
 Function pos
 	 Purpose:		calculates motor position via encoder
 	 Parameters:	none
 	 Returns: 		motor position in BDI
 *-------------------------------------------------*/
double pos(void){
	double curr_pos;
	static int32_t c_n, c_n0;	// current encoder count and first encoder count
	static int initial_call = 0;

	c_n = Encoder_Counter(&encC0);	// get current count from encoder

	if (initial_call == 0){		// if it's the first call,
		c_n0 = c_n;					// set first encoder count
		initial_call++;
	}

	curr_pos = c_n - c_n0;			// current position (relative to first) in BDI

	return (double)curr_pos;
}

/*--------------------------------------------------
 Function cascade
 	 Purpose:		calculates difference function
 	 Parameters:	xin - input value (double)
 	 	 	 	 	* fa - pointer to biquad structure
 	 	 	 	 	ns - number of biquad section (int)
 	 	 	 	 	ymin - saturation lower bound (double)
 	 	 	 	 	ymax - saturation upper bound (double)
 	 Returns: 		y0 - output value (double)
 *-------------------------------------------------*/
double cascade(double xin, struct biquad *fa, int ns, double ymin, double ymax){
	int i;
	struct biquad *f;
	f = fa;
	double y0;

	for (i = 1; i <= ns; i++){
		if(i == 1){
			f->x0 = xin;
			y0 = xin;
		}
		else{
			f->x0 = y0;
		}
		y0 = (f->b0*f->x0 + f->b1*f->x1 + f->b2*f->x2 - f->a1*f->y1 - f->a2*f->y2)/f->a0;
		if (i==ns){
			// saturate y0 for D/A converter
			y0 = SATURATE(y0, ymin, ymax);
		}
		// update xi and yi for the next step through the loop
		f->x2 = f->x1;
		f->x1 = f->x0;
		f->y2 = f->y1;
		f->y1 = y0;
		// advance to next biquad in array
		f++;
	}

	return y0;

}


