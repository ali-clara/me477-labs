/* Lab 7 - Ali Jones*/

/* includes */
#include "stdio.h"
#include "MyRio.h"
#include "me477.h"
#include <string.h>
#include "ctable2.h"
#include "TimerIRQ.h"
#include <pthread.h>
#include "emulate.h"

/* prototypes */

/* definitions */
void* Timer_Irq_Thread(void* resource);

/* global variables */
typedef struct {
	NiFpga_IrqContext irqContext;	// context
	table *a_table;		// pointer to table
	NiFpga_Bool irqThreadRdy;	// thread ready flag
} ThreadResource;

uint32_t timeoutValue;

int main(int argc, char **argv)
{
	NiFpga_Status status;
	int32_t irq_status;
	MyRio_IrqTimer irqTimer0;
	ThreadResource irqThread0;
	pthread_t thread;
	char *Table_Title = "Motor Control Table";

    status = MyRio_Open();		    /*Open the myRIO NiFpga Session.*/
    if (MyRio_IsNotSuccess(status)) return status;

    // initialize table editor variables
    table my_table[] = {
    		{"V_ref: (rpm)", 1, 0.},
    		{"V_act: (rpm)", 0, 0.},
    		{"VDAout (mV)",  0, 0.},
    		{"Kp (V-s/rad)", 1, 0.},
    		{"Ki (V/rad)",   1, 0.},
    		{"BTI (ms)",     1, 5.0},
    };

    // Registers corresponding to the IRQ channel
    irqTimer0.timerWrite = IRQTIMERWRITE;
    irqTimer0.timerSet = IRQTIMERSETTIME;
    timeoutValue = 500;

    irq_status = Irq_RegisterTimerIrq( &irqTimer0,
    							   	   &irqThread0.irqContext,
    							   	   timeoutValue);

    // Set the indicator to allow the new thread
    irqThread0.irqThreadRdy = NiFpga_True;

    // Create new thread to catch the IRQ
    irq_status = pthread_create( &thread,
    							 NULL,
    							 Timer_Irq_Thread,
    							 &irqThread0);

    // Initialize the thread resource to point to table
    irqThread0.a_table = my_table;

    // Set the thread ready flag
    irqThread0.irqThreadRdy = NiFpga_True;

    // call the table editor
    ctable2(Table_Title, my_table, 6);

    // terminate thread
	irqThread0.irqThreadRdy = NiFpga_False;
	irq_status = pthread_join(thread, NULL);

    // unregister timer interrupt
	irq_status = Irq_UnregisterTimerIrq( &irqTimer0,
										 irqThread0.irqContext);

	status = MyRio_Close();	 /*Close the myRIO NiFpga Session. */
	return status;
}

void* Timer_Irq_Thread(void* resource){

	ThreadResource* threadResource = (ThreadResource*) resource;

	double *vref = &((threadResource->a_table+0)->value);
	double *vact = &((threadResource->a_table+1)->value);
	double *vdaout = &((threadResource->a_table+2)->value);
	double *kp = &((threadResource->a_table+3)->value);
	double *ki = &((threadResource->a_table+4)->value);
	double *bti = &((threadResource->a_table+5)->value);
}
